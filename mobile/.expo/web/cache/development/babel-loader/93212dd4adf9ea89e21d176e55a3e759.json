{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/home/monokuma/dev/ProjetoIntegrador/party-radar/src/components/InputMask/index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useCallback } from 'react';\nimport { TextInputMask } from 'react-native-masked-text';\nimport Input from \"../Input\";\n\nvar InputMask = function InputMask(_ref) {\n  var type = _ref.type,\n      rest = _objectWithoutProperties(_ref, [\"type\"]);\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      rawValue = _useState4[0],\n      setRawValue = _useState4[1];\n\n  var handleOnChangeText = useCallback(function (maskedValue, unmaskedValue) {\n    setValue(maskedValue);\n    setRawValue(unmaskedValue);\n  }, []);\n  return React.createElement(TextInputMask, _extends({\n    type: type,\n    includeRawValueInChangeText: true,\n    value: value,\n    onChangeText: handleOnChangeText,\n    customTextInput: Input,\n    customTextInputProps: _objectSpread({\n      rawValue: rawValue\n    }, rest)\n  }, rest, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }));\n};\n\nexport default InputMask;","map":{"version":3,"sources":["/home/monokuma/dev/ProjetoIntegrador/party-radar/src/components/InputMask/index.tsx"],"names":["React","useState","useCallback","TextInputMask","Input","InputMask","type","rest","value","setValue","rawValue","setRawValue","handleOnChangeText","maskedValue","unmaskedValue"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SAASC,aAAT,QAA+B,0BAA/B;AACA,OAAOC,KAAP;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAA4B;AAAA,MAAzBC,IAAyB,QAAzBA,IAAyB;AAAA,MAAfC,IAAe;;AAAA,kBAClBN,QAAQ,CAAC,EAAD,CADU;AAAA;AAAA,MACrCO,KADqC;AAAA,MAC9BC,QAD8B;;AAAA,mBAEZR,QAAQ,CAAC,EAAD,CAFI;AAAA;AAAA,MAErCS,QAFqC;AAAA,MAE3BC,WAF2B;;AAG5C,MAAMC,kBAAkB,GAAGV,WAAW,CAAC,UAACW,WAAD,EAAcC,aAAd,EAAgC;AACrEL,IAAAA,QAAQ,CAACI,WAAD,CAAR;AACAF,IAAAA,WAAW,CAACG,aAAD,CAAX;AACD,GAHqC,EAGnC,EAHmC,CAAtC;AAIA,SACE,oBAAC,aAAD;AACE,IAAA,IAAI,EAAER,IADR;AAEE,IAAA,2BAA2B,MAF7B;AAGE,IAAA,KAAK,EAAEE,KAHT;AAIE,IAAA,YAAY,EAAEI,kBAJhB;AAKE,IAAA,eAAe,EAAER,KALnB;AAME,IAAA,oBAAoB;AAClBM,MAAAA,QAAQ,EAARA;AADkB,OAEfH,IAFe;AANtB,KAUMA,IAVN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAcD,CArBD;;AAsBA,eAAeF,SAAf","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { TextInputMask  } from 'react-native-masked-text';\nimport Input from '../Input';\n\nconst InputMask = ({ type,  ...rest }:any) => {\n  const [value, setValue] = useState('');\n  const [rawValue, setRawValue] = useState('');\n  const handleOnChangeText = useCallback((maskedValue, unmaskedValue) => {\n    setValue(maskedValue);\n    setRawValue(unmaskedValue);\n  }, []);\n  return (\n    <TextInputMask\n      type={type}\n      includeRawValueInChangeText\n      value={value}\n      onChangeText={handleOnChangeText}\n      customTextInput={Input}\n      customTextInputProps={{\n        rawValue,\n        ...rest,\n      }}\n      {...rest}\n    />\n  );\n};\nexport default InputMask;"]},"metadata":{},"sourceType":"module"}