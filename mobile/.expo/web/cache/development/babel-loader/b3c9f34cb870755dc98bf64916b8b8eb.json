{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/home/monokuma/dev/ProjetoIntegrador/party-radar/src/components/Input/index.tsx\";\n\nimport React, { useEffect, useState, useCallback, useRef, useImperativeHandle, forwardRef } from 'react';\nimport { useField } from '@unform/core';\nimport { Container, TextInput, Icon } from \"./styles\";\n\nvar Input = function Input(_ref, ref) {\n  var name = _ref.name,\n      icon = _ref.icon,\n      rest = _objectWithoutProperties(_ref, [\"name\", \"icon\"]);\n\n  var inputElementRef = useRef(null);\n\n  var _useField = useField(name),\n      registerField = _useField.registerField,\n      defaultValue = _useField.defaultValue,\n      fieldName = _useField.fieldName,\n      error = _useField.error;\n\n  var inputValueRef = useRef({\n    value: defaultValue\n  });\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isFocused = _useState2[0],\n      setIsfocused = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isFilled = _useState4[0],\n      setIsFilled = _useState4[1];\n\n  var handleInputFocus = useCallback(function () {\n    setIsfocused(true);\n  }, []);\n  var handleInputBlur = useCallback(function () {\n    setIsfocused(false);\n    setIsFilled(!!inputValueRef.current.value);\n  }, []);\n  useImperativeHandle(ref, function () {\n    return {\n      focus: function focus() {\n        inputElementRef.current.focus();\n      }\n    };\n  });\n  useEffect(function () {\n    registerField({\n      name: fieldName,\n      ref: inputValueRef.current,\n      path: 'value',\n      setValue: function setValue(ref, value) {\n        inputValueRef.current.value = value, inputElementRef.current.setNativeProps({\n          text: value\n        });\n      },\n      clearValue: function clearValue() {\n        inputValueRef.current.value = '';\n        inputElementRef.current.clear();\n      }\n    });\n  }, [fieldName, registerField]);\n  return React.createElement(Container, {\n    isFocused: isFocused,\n    isErrored: !!error,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, icon !== '' && React.createElement(Icon, {\n    name: icon,\n    size: 20,\n    color: isFocused || isFilled ? '#40DF9F' : '#666360',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), React.createElement(TextInput, _extends({\n    ref: inputElementRef,\n    keyboardAppearance: \"dark\",\n    placeholderTextColor: \"#666360\",\n    defaultValue: defaultValue,\n    onFocus: handleInputFocus,\n    onBlur: handleInputBlur,\n    onChangeText: function onChangeText(value) {\n      inputValueRef.current.value = value;\n    }\n  }, rest, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default forwardRef(Input);","map":{"version":3,"sources":["/home/monokuma/dev/ProjetoIntegrador/party-radar/src/components/Input/index.tsx"],"names":["React","useEffect","useState","useCallback","useRef","useImperativeHandle","forwardRef","useField","Container","TextInput","Icon","Input","ref","name","icon","rest","inputElementRef","registerField","defaultValue","fieldName","error","inputValueRef","value","isFocused","setIsfocused","isFilled","setIsFilled","handleInputFocus","handleInputBlur","current","focus","path","setValue","setNativeProps","text","clearValue","clear"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback, useRef, useImperativeHandle, forwardRef } from 'react'\nimport { TextInputProps } from 'react-native'\nimport { useField } from '@unform/core'\n\nimport { Container, TextInput, Icon } from './styles'\n\ninterface InputProps extends TextInputProps {\n  name: string;\n  icon: string;\n}\n\ninterface InputValueReference {\n  value: string;\n}\n\ninterface InputRef {\n  focus(): void\n}\n\nconst Input: React.ForwardRefRenderFunction<InputRef, InputProps> = ({ name, icon, ...rest }, ref) => {\n  const inputElementRef = useRef<any>(null)\n\n  const { registerField, defaultValue, fieldName, error } = useField(name)\n  const inputValueRef = useRef<InputValueReference>({ value: defaultValue })\n\n  const [isFocused, setIsfocused] = useState(false)\n  const [isFilled, setIsFilled] = useState(false)\n\n  const handleInputFocus = useCallback(() => {\n    setIsfocused(true)\n  }, [])\n\n  const handleInputBlur = useCallback(() => {\n    setIsfocused(false)\n    setIsFilled(!!inputValueRef.current.value)\n  }, [])\n\n\n  useImperativeHandle(ref, () => ({\n    focus() {\n      inputElementRef.current.focus()\n    },\n  }))\n\n  useEffect(() => {\n    registerField<string>({\n      name: fieldName,\n      ref: inputValueRef.current,\n      path: 'value',\n      setValue(ref: any, value) {\n        inputValueRef.current.value = value,\n          inputElementRef.current.setNativeProps({ text: value })\n      },\n      clearValue() {\n        inputValueRef.current.value = ''\n        inputElementRef.current.clear()\n      }\n    })\n  }, [fieldName, registerField])\n  return (\n    <Container isFocused={isFocused} isErrored={!!error}>\n      {icon !== '' &&\n      <Icon name={icon} size={20} color={isFocused || isFilled ? '#40DF9F' : '#666360'} />\n      }\n      <TextInput\n        ref={inputElementRef}\n        keyboardAppearance=\"dark\"\n        placeholderTextColor=\"#666360\"\n        defaultValue={defaultValue}\n        onFocus={handleInputFocus}\n        onBlur={handleInputBlur}\n        onChangeText={(value) => {\n          inputValueRef.current.value = value\n        }}\n        {...rest}\n      />\n    </Container>\n  )\n\n}\n\n\nexport default forwardRef(Input)"]},"metadata":{},"sourceType":"module"}